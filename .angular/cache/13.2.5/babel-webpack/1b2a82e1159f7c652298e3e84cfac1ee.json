{"ast":null,"code":"import { catchError, map, tap } from 'rxjs/operators';\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport let HeroService = /*#__PURE__*/(() => {\n  class HeroService {\n    constructor(messageService, http) {\n      this.messageService = messageService;\n      this.http = http;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      this.heroesUrl = 'api/heroes';\n    }\n\n    addHero(hero) {\n      return this.http.post(this.heroesUrl, hero, this.httpOptions).pipe(tap(newHero => this.log(`added hero w/ id=${newHero.id}`)), catchError(this.handleError('addHero')));\n    }\n\n    deleteHero(id) {\n      const url = `${this.heroesUrl}/${id}`;\n      return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted hero ${id}`)), catchError(this.handleError('deleteHero')));\n    }\n\n    getHeroes() {\n      /*  const heroes = of(HEROES);                            ce code renvoi le tableau de mock-heroes\n        this.messageService.add('HeroService: fetching heroes');\n        return heroes*/\n      return this.http.get(this.heroesUrl) // ce code utilise la method HttpClient\n      .pipe(tap(_ => this.log('fetching heroes')), catchError(this.handleError('getHeroes', [])));\n    }\n\n    getHero(id) {\n      const url = `${this.heroesUrl}/${id}`;\n      return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n    }\n\n    getHeroNo404(id) {\n      const url = `${this.heroesUrl}/?id=${id}`;\n      return this.http.get(url).pipe(map(heroes => heroes[0]), // returns a {0|1} element array\n      tap(h => {\n        const outcome = h ? 'fetched' : 'did not find';\n        this.log(`${outcome} hero id=${id}`);\n      }), catchError(this.handleError(`getHero id=${id}`)));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        console.error(error);\n        this.log(`${operation} failed: ${error.message}`);\n        return of(result);\n      };\n    }\n\n    log(message) {\n      this.messageService.add(`HeroService: ${message}`);\n    } // récupère les termes du nom des héros recherché\n\n\n    search(term) {\n      if (!term.trim()) {\n        // si le terme recherché n'existe pas, le tableau de héros est vide\n        return of([]);\n      }\n\n      return this.http.get(`${this.heroesUrl}/?name=${term}`).pipe(tap(x => x.length ? this.log(`found heroes matching \"${term}\"`) : this.log(` no heroes matching \"${term}\"`)), catchError(this.handleError('searchHeroes', [])));\n    }\n\n    searchHeroes(term) {\n      if (!term.trim()) {\n        // si aucun term est rentrée il renvoi un tableau vide\n        return of([]);\n      }\n\n      return this.http.get(`${this.heroesUrl}/?name=${term}`).pipe(tap(x => x.length ? this.log(`found heroes matching \"${term}\"`) : this.log(`no heroes matching \"${term}\"`)), catchError(this.handleError('searchHeroes', [])));\n    }\n\n    updateHero(hero) {\n      return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updateHero: ${hero.id}`)), catchError(this.handleError(`updateHero`)));\n    }\n\n  }\n\n  HeroService.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  HeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root'\n  });\n  return HeroService;\n})();","map":null,"metadata":{},"sourceType":"module"}